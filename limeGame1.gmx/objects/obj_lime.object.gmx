<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_lime1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.state = 1;
// 1 - before angle
// 2 - before power
//
obj_lime.y = 3*(view_hview[0] / 4);
obj_lime.x = (view_wview[0] / 2);

current_path = path_add();
//path_assign(current_path, lime_path1);
//path_start('lime_path1', 20, 'reverse', 'relative');

start_lime = false;

isTouching = 0;
initXStart = 0;
initYStart = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_message("destroy lime");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_check_button_released(mb_left))
{
    var initX = mouse_x;
    var initY = mouse_y;    
    var distance = point_distance(x, y, mouse_x, mouse_y);
    var angle = point_direction(x, y, mouse_x, mouse_y);
    
    global.start_speed = distance / 25;
    global.angle = angle - 90;
    
    start_lime = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message(global.state);
/*if (global.state == 1) {
    with (obj_angle_position)
    {
        var current_angle = path_position;
        global.angle = (1 - current_angle)*180 - 90;
        path_end();
    }    
    
    global.state = 2;    
    with (obj_arrow)
    {
        instance_destroy();
    } 
    with (obj_power_position)
    {
        //path_start();
    } 
} else {
    if (global.state == 2) {
        start_lime = true;
    } else {
    }
}*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_message("End path");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (start_lime == true) {
    start_lime = false;
    
    draw_set_color(c_black);
    path_speed = global.start_speed * 5;
    
    //current_path = path_add();
    
    var current_a = 9.8;
    var current_x = x;
    var current_y = y;
    
    var prev_x = x;
    var prev_y = y;
    
    draw_set_color(c_black);
    
    var i;
    i = 500;
    current_path = path_add();
    path_clear_points(current_path);
    
    repeat(2)
    {
       prev_x = current_x;
       prev_y = current_y;
       
       current_y = lengthdir_y(i, global.angle + 90); //fix angle to use in calculations, adding 90 degrees
       current_x = lengthdir_x(i, global.angle + 90);
       path_add_point(current_path, current_x, current_y, 100);
       
       //variant with gravity fall
       /*current_y = - path_speed * i;
       current_x = (current_a*i*i)/2;
       
       //draw_line_colour(prev_x, prev_y, lengthdir_x(current_x, global.angle), lengthdir_x(current_y, global.angle), c_red, c_blue);
       
       //draw_arrow(x, y, 0, 0, 50);
       //draw_line_colour(50, 50, 300, 50, c_red, c_blue);
       //draw_line_colour(x, y, 0, 0, c_red, c_blue);
       
       show_debug_message("current_x " + current_x +"; current_y " + current_y);
       /path_add_point(current_path, lengthdir_x(current_x, global.angle), lengthdir_y(current_y, global.angle), 100);*/
       
       i += 500;
    }
    
    path_set_closed(current_path, false);
    draw_path(current_path, x, y, false);
    path_start(current_path, global.start_speed, path_action_stop, 0); 
}

if (path_position&gt;0) {
    image_xscale = 0.05 + 0.25*(1-path_position);
    image_yscale = 0.05 + 0.25*(1-path_position);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
